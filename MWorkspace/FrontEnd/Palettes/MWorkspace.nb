(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     13436,        321]
NotebookOptionsPosition[     11141,        259]
NotebookOutlinePosition[     13424,        321]
CellTagsIndexPosition[     13381,        318]
WindowTitle->Workspace
WindowFrame->Palette*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{MWorkspace`Palette`Private`sel$$ = {}, 
  MWorkspace`Palette`Private`context$$ = "Global`"}, 
  DynamicWrapperBox[
   DynamicBox[ToBoxes[
     MWorkspace`Palette`Private`symbolsPicker[
      Dynamic[MWorkspace`Palette`Private`sel$$], 
      (Take[#, 
       UpTo[15]]& )[
       Names[
        StringJoin[MWorkspace`Palette`Private`context$$, "*"]]]], 
     StandardForm],
    ImageSizeCache->{309., {31., 36.}},
    TrackedSymbols:>{MWorkspace`Palette`Private`context$$}], 
   MWorkspace`Palette`Private`context$$ = CurrentValue[
      EvaluationNotebook[], {TaggingRules, "Context"}]; CurrentValue[
      EvaluationNotebook[], {TaggingRules, "Selected"}] = 
    MWorkspace`Palette`Private`sel$$; Null,
   ImageSizeCache->{309., {31., 36.}}],
  DynamicModuleValues:>{},
  Initialization:>({MWorkspace`Palette`Private`symbolsPicker[
       Pattern[MWorkspace`Palette`Private`sel$, 
        Blank[Dynamic]], 
       Pattern[MWorkspace`Palette`Private`names$, 
        Blank[List]]] := 
     MWorkspace`Palette`Private`listGridPicker[
      MWorkspace`Palette`Private`sel$, 
       Map[{# -> MWorkspace`Palette`Private`shortName[#], # -> 
         MWorkspace`Palette`Private`overviewInfo[#], # -> 
         MWorkspace`Palette`Private`getValue[#]}& , 
        MWorkspace`Palette`Private`names$], {"Name", "Info", "Value"}], 
     MWorkspace`Palette`Private`listGridPicker[
       Pattern[MWorkspace`Palette`Private`sel$, 
        Blank[Dynamic]], 
       Pattern[MWorkspace`Palette`Private`items$, {
         RepeatedNull[{
           Repeated[
            Alternatives[Rule, RuleDelayed][
             Blank[], 
             Blank[]]]}]}], 
       Pattern[MWorkspace`Palette`Private`headers$, 
        Blank[List]]] := Deploy[
       Pane[
        Grid[
         Prepend[
          MWorkspace`Palette`Private`makePickerItem[
          MWorkspace`Palette`Private`sel$, MWorkspace`Palette`Private`items$],
           MWorkspace`Palette`Private`headers$], 
         Frame -> {{{False}}, {True, True, {False}}}, 
         Background -> {None, {LightGray, {None}}}, 
         Spacings -> {Automatic, 0.5}, ItemSize -> {Automatic, All}], 
        Scrollbars -> Automatic, AppearanceElements -> None, Alignment -> 
        Center]], 
     Attributes[MWorkspace`Palette`Private`makePickerItem] = {Listable}, 
     MWorkspace`Palette`Private`makePickerItem[
       Dynamic[
        Pattern[MWorkspace`Palette`Private`sel$, 
         Blank[]]], 
       Alternatives[Rule, RuleDelayed][
        Pattern[MWorkspace`Palette`Private`val$, 
         Blank[]], 
        Pattern[MWorkspace`Palette`Private`lbl$, 
         Blank[]]]] := Item[
       EventHandler[MWorkspace`Palette`Private`lbl$, {"MouseClicked" :> Which[
           CurrentValue["ControlKey"], 
           If[
            MemberQ[
            MWorkspace`Palette`Private`sel$, MWorkspace`Palette`Private`val$],
             MWorkspace`Palette`Private`sel$ = 
            DeleteCases[
             MWorkspace`Palette`Private`sel$, 
              MWorkspace`Palette`Private`val$], 
            AppendTo[
            MWorkspace`Palette`Private`sel$, 
             MWorkspace`Palette`Private`val$]], True, 
           MWorkspace`Palette`Private`sel$ = {
            MWorkspace`Palette`Private`val$}]}, PassEventsDown -> True], 
       Background -> Dynamic[
         If[
          MemberQ[
          MWorkspace`Palette`Private`sel$, MWorkspace`Palette`Private`val$], 
          LightBlue, None]]], MWorkspace`Palette`Private`shortName[
       Pattern[MWorkspace`Palette`Private`fullname$, 
        Blank[String]]] := Last[
       StringSplit[MWorkspace`Palette`Private`fullname$, "`"]], 
     MWorkspace`Palette`Private`overviewInfo[
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]]] := Row[
       Through[
        {MWorkspace`Palette`Private`attributeInfo, 
         MWorkspace`Palette`Private`headInfo, 
         MWorkspace`Palette`Private`moreOwnValueInfo}[
        MWorkspace`Palette`Private`name$]]], 
     MWorkspace`Palette`Private`attributeInfo[
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]]] := Row[
       Map[MWorkspace`Palette`Private`attributeInfo1, 
        Attributes[MWorkspace`Palette`Private`name$]], BaselinePosition -> 
       Scaled[0.1]], MWorkspace`Palette`Private`attributeInfo1[Locked] := 
     RawBoxes[
       DynamicBox[
        FEPrivate`ImportImage[
         FrontEnd`FileName[{"MWorkspace"}, "AttributeLocked.png"]]]], 
     MWorkspace`Palette`Private`attributeInfo1[Protect] := RawBoxes[
       DynamicBox[
        FEPrivate`ImportImage[
         FrontEnd`FileName[{"MWorkspace"}, "AttributeProtect.png"]]]], 
     MWorkspace`Palette`Private`attributeInfo1[ReadProtected] := RawBoxes[
       DynamicBox[
        FEPrivate`ImportImage[
         FrontEnd`FileName[{"MWorkspace"}, "AttributeReadProtected.png"]]]], 
     MWorkspace`Palette`Private`attributeInfo1[Temporary] := RawBoxes[
       DynamicBox[
        FEPrivate`ImportImage[
         FrontEnd`FileName[{"MWorkspace"}, "AttributeTemporary.png"]]]], 
     MWorkspace`Palette`Private`attributeInfo1[
       Blank[]] := Nothing, 
     Attributes[FrontEnd`FileName] = {HoldAll, ReadProtected}, 
     MWorkspace`Palette`Private`headInfo[
       PatternTest[
        Pattern[MWorkspace`Palette`Private`name$, 
         Blank[String]], MWorkspace`Palette`Private`hasOwnValueQ]] := 
     MWorkspace`Palette`Private`getFromValue[
      Head, MWorkspace`Palette`Private`name$], 
     MWorkspace`Palette`Private`headInfo[
       PatternTest[
        Pattern[MWorkspace`Palette`Private`name$, 
         Blank[String]], MWorkspace`Palette`Private`hasDownValueQ]] := 
     StringJoin[
       MWorkspace`Palette`Private`shortName[MWorkspace`Palette`Private`name$],
        "[\[Ellipsis]]"], MWorkspace`Palette`Private`headInfo[
       PatternTest[
        Pattern[MWorkspace`Palette`Private`name, 
         Blank[String]], MWorkspace`Palette`Private`noDefinitionsQ]] := 
     "\[LeftSkeleton]Undefined\[RightSkeleton]", 
     MWorkspace`Palette`Private`headInfo[
       Pattern[MWorkspace`Palette`Private`name, 
        Blank[String]]] := "\[LeftSkeleton]Other Type\[RightSkeleton]", 
     MWorkspace`Palette`Private`hasOwnValueQ[
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]]] := 
     ToExpression[
       MWorkspace`Palette`Private`name$, StandardForm, OwnValues] =!= {}, 
     MWorkspace`Palette`Private`getFromValue[
       Pattern[MWorkspace`Palette`Private`f$, 
        Blank[]], 
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]]] := 
     With[{MWorkspace`Palette`Private`val$1550 = 
        MWorkspace`Palette`Private`getValue[
         MWorkspace`Palette`Private`name$, Unevaluated]}, 
       MWorkspace`Palette`Private`f$[MWorkspace`Palette`Private`val$1550]], 
     MWorkspace`Palette`Private`getValue[
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]], 
       Optional[
        Pattern[MWorkspace`Palette`Private`wrapper$, 
         Blank[]], HoldForm]] := Replace[
       ToExpression[
       MWorkspace`Palette`Private`name$, StandardForm, 
        MWorkspace`Palette`Private`wrapper$], 
       ToExpression[
       MWorkspace`Palette`Private`name$, StandardForm, OwnValues], -1], 
     MWorkspace`Palette`Private`hasDownValueQ[
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]]] := 
     ToExpression[
       MWorkspace`Palette`Private`name$, StandardForm, DownValues] =!= {}, 
     MWorkspace`Palette`Private`noDefinitionsQ[
       Pattern[MWorkspace`Palette`Private`name$, 
        Blank[String]]] := Not[
       GeneralUtilities`HasDefinitionsQ[MWorkspace`Palette`Private`name$]], 
     Attributes[GeneralUtilities`HasDefinitionsQ] = {HoldAll, ReadProtected}, 
     MWorkspace`Palette`Private`moreOwnValueInfo[
       PatternTest[
        Pattern[MWorkspace`Palette`Private`name$, 
         Blank[String]], MWorkspace`Palette`Private`hasOwnValueQ]] := 
     MWorkspace`Palette`Private`moreOwnValueInfo1[
      MWorkspace`Palette`Private`name$], 
     MWorkspace`Palette`Private`moreOwnValueInfo[
       Blank[]] := Nothing, MWorkspace`Palette`Private`moreOwnValueInfo1[
       Condition[
        Pattern[MWorkspace`Palette`Private`name$, 
         Blank[String]], 
        MWorkspace`Palette`Private`getFromValue[
        ArrayQ, MWorkspace`Palette`Private`name$]]] := Row[
       Flatten[{
         If[
          MWorkspace`Palette`Private`getFromValue[
          Developer`PackedArrayQ, MWorkspace`Palette`Private`name$], 
          "(Packed)", {}], "<", 
         Riffle[
          MWorkspace`Palette`Private`getFromValue[
          Dimensions, MWorkspace`Palette`Private`name$], "\[Times]"], ">"}]], 
     MWorkspace`Palette`Private`moreOwnValueInfo1[
       Condition[
        Pattern[MWorkspace`Palette`Private`name$, 
         Blank[String]], 
        MWorkspace`Palette`Private`getFromValue[
        ImageQ, MWorkspace`Palette`Private`name$]]] := Row[
       Flatten[{"<", 
         Riffle[
          MWorkspace`Palette`Private`getFromValue[
          ImageDimensions, MWorkspace`Palette`Private`name$], "\[Times]"], 
         ">"}]], MWorkspace`Palette`Private`moreOwnValueInfo1[
       Condition[
        Pattern[MWorkspace`Palette`Private`name, 
         Blank[String]], 
        MWorkspace`Palette`Private`getFromValue[
        BooleanQ, MWorkspace`Palette`Private`name]]] := "(Bool)", 
     MWorkspace`Palette`Private`moreOwnValueInfo1[
       Condition[
        Pattern[MWorkspace`Palette`Private`name$, 
         Blank[String]], 
        MWorkspace`Palette`Private`getFromValue[
        StringQ, MWorkspace`Palette`Private`name$]]] := Row[{"<", 
        MWorkspace`Palette`Private`getFromValue[
        StringLength, MWorkspace`Palette`Private`name$], ">"}], 
     MWorkspace`Palette`Private`moreOwnValueInfo1[
       Blank[]] := Nothing}; (
    MWorkspace`Palette`Private`context$$ = CurrentValue[
       EvaluationNotebook[], {TaggingRules, "Context"}]; 
    MWorkspace`Palette`Private`sel$$ = CurrentValue[
       EvaluationNotebook[], {TaggingRules, "Selected"}]; Null))]],
 CellMargins->{{0, 0}, {0, 0}},
 CellBracketOptions->{"Color"->RGBColor[0.269993, 0.308507, 0.6]},
 CellHorizontalScrolling->True,
 PageBreakAbove->True,
 PageBreakWithin->False,
 ShowAutoStyles->True,
 LineSpacing->{1.25, 0},
 AutoItalicWords->{},
 ScriptMinSize->9,
 ShowStringCharacters->False,
 FontFamily:>CurrentValue["PanelFontFamily"],
 FontSize:>CurrentValue[
  "PanelFontSize"],ExpressionUUID->"ace48955-fd07-4c40-936e-2cf1b058a199"]
},
WindowSize->All,
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
WindowElements->{},
WindowTitle->"Workspace",
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{
       ButtonBox[
        DynamicBox[
         FEPrivate`ImportImage[
          FrontEnd`FileName[{"MWorkspace"}, "ActionNew.png"]]], 
        ButtonFunction :> Null, Appearance -> "FramedPalette", Evaluator -> 
        Automatic, Method -> "Preemptive"], 
       ButtonBox[
        DynamicBox[
         FEPrivate`ImportImage[
          FrontEnd`FileName[{"MWorkspace"}, "ActionEdit.png"]]], 
        ButtonFunction :> Null, Appearance -> "FramedPalette", Evaluator -> 
        Automatic, Method -> "Preemptive"], 
       ButtonBox[
        DynamicBox[
         FEPrivate`ImportImage[
          FrontEnd`FileName[{"MWorkspace"}, "ActionImport.png"]]], 
        ButtonFunction :> Null, Appearance -> "FramedPalette", Evaluator -> 
        Automatic, Method -> "Preemptive"], 
       ButtonBox[
        DynamicBox[
         FEPrivate`ImportImage[
          FrontEnd`FileName[{"MWorkspace"}, "ActionExport.png"]]], 
        ButtonFunction :> Null, Appearance -> "FramedPalette", Evaluator -> 
        Automatic, Method -> "Preemptive"], 
       ButtonBox[
        DynamicBox[
         FEPrivate`ImportImage[
          FrontEnd`FileName[{"MWorkspace"}, "ActionDelete.png"]]], 
        ButtonFunction :> Null, Appearance -> "FramedPalette", Evaluator -> 
        Automatic, Method -> "Preemptive"], 
       ButtonBox[
        DynamicBox[
         FEPrivate`ImportImage[
          FrontEnd`FileName[{"MWorkspace"}, "ActionRefresh.png"]]], 
        ButtonFunction :> Null, Appearance -> "FramedPalette", Evaluator -> 
        Automatic, Method -> "Preemptive"]}}, AutoDelete -> False, 
     GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"]], "DockedCells"],
TaggingRules->{"Selected" -> {}, "Context" -> "Global`"},
CellContext->"MWorkspace`Palette`Private`",
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (2018\:5e743\:670828\
\:65e5)",
StyleDefinitions->"Palette.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[582, 21, 10555, 236, 69, InheritFromParent,ExpressionUUID->"ace48955-fd07-4c40-936e-2cf1b058a199",
 PageBreakAbove->True,
 PageBreakWithin->False]
}
]
*)

(* End of internal cache information *)

